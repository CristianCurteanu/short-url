// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pkg/grpc/srv.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MappingsServiceClient is the client API for MappingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MappingsServiceClient interface {
	GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*GetMappingResponse, error)
	CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*CreateMappingResponse, error)
	DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*DeleteMappingResponse, error)
}

type mappingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMappingsServiceClient(cc grpc.ClientConnInterface) MappingsServiceClient {
	return &mappingsServiceClient{cc}
}

func (c *mappingsServiceClient) GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*GetMappingResponse, error) {
	out := new(GetMappingResponse)
	err := c.cc.Invoke(ctx, "/MappingsService/GetMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingsServiceClient) CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*CreateMappingResponse, error) {
	out := new(CreateMappingResponse)
	err := c.cc.Invoke(ctx, "/MappingsService/CreateMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingsServiceClient) DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*DeleteMappingResponse, error) {
	out := new(DeleteMappingResponse)
	err := c.cc.Invoke(ctx, "/MappingsService/DeleteMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MappingsServiceServer is the server API for MappingsService service.
// All implementations must embed UnimplementedMappingsServiceServer
// for forward compatibility
type MappingsServiceServer interface {
	GetMapping(context.Context, *GetMappingRequest) (*GetMappingResponse, error)
	CreateMapping(context.Context, *CreateMappingRequest) (*CreateMappingResponse, error)
	DeleteMapping(context.Context, *DeleteMappingRequest) (*DeleteMappingResponse, error)
	mustEmbedUnimplementedMappingsServiceServer()
}

// UnimplementedMappingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMappingsServiceServer struct {
}

func (UnimplementedMappingsServiceServer) GetMapping(context.Context, *GetMappingRequest) (*GetMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapping not implemented")
}
func (UnimplementedMappingsServiceServer) CreateMapping(context.Context, *CreateMappingRequest) (*CreateMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapping not implemented")
}
func (UnimplementedMappingsServiceServer) DeleteMapping(context.Context, *DeleteMappingRequest) (*DeleteMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapping not implemented")
}
func (UnimplementedMappingsServiceServer) mustEmbedUnimplementedMappingsServiceServer() {}

// UnsafeMappingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MappingsServiceServer will
// result in compilation errors.
type UnsafeMappingsServiceServer interface {
	mustEmbedUnimplementedMappingsServiceServer()
}

func RegisterMappingsServiceServer(s grpc.ServiceRegistrar, srv MappingsServiceServer) {
	s.RegisterService(&MappingsService_ServiceDesc, srv)
}

func _MappingsService_GetMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingsServiceServer).GetMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MappingsService/GetMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingsServiceServer).GetMapping(ctx, req.(*GetMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingsService_CreateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingsServiceServer).CreateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MappingsService/CreateMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingsServiceServer).CreateMapping(ctx, req.(*CreateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingsService_DeleteMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingsServiceServer).DeleteMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MappingsService/DeleteMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingsServiceServer).DeleteMapping(ctx, req.(*DeleteMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MappingsService_ServiceDesc is the grpc.ServiceDesc for MappingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MappingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MappingsService",
	HandlerType: (*MappingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMapping",
			Handler:    _MappingsService_GetMapping_Handler,
		},
		{
			MethodName: "CreateMapping",
			Handler:    _MappingsService_CreateMapping_Handler,
		},
		{
			MethodName: "DeleteMapping",
			Handler:    _MappingsService_DeleteMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/srv.proto",
}
